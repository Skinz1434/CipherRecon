def to_upside_down(text: str) -> str:
    """Convert text to upside down characters"""
    if not text:
        return ""
    # Map for upside down text
    upside_down_map = {
        'a': '…ê', 'b': 'q', 'c': '…î', 'd': 'p', 'e': '«ù', 'f': '…ü', 'g': '∆É', 'h': '…•', 'i': '·¥â',
        'j': '…æ', 'k': ' û', 'l': 'l', 'm': '…Ø', 'n': 'u', 'o': 'o', 'p': 'd', 'q': 'b', 'r': '…π',
        's': 's', 't': ' á', 'u': 'n', 'v': ' å', 'w': ' ç', 'x': 'x', 'y': ' é', 'z': 'z',
        'A': '‚àÄ', 'B': 'B', 'C': '∆Ü', 'D': 'D', 'E': '∆é', 'F': '‚Ñ≤', 'G': '◊§', 'H': 'H', 'I': 'I',
        'J': '≈ø', 'K': 'K', 'L': 'À•', 'M': 'W', 'N': 'N', 'O': 'O', 'P': '‘Ä', 'Q': 'Q', 'R': 'R',
        'S': 'S', 'T': '‚î¥', 'U': '‚à©', 'V': 'Œõ', 'W': 'M', 'X': 'X', 'Y': '‚ÖÑ', 'Z': 'Z',
        '0': '0', '1': '∆ñ', '2': '·ÑÖ', '3': '∆ê', '4': '„Ñ£', '5': 'œõ', '6': '9', '7': '„Ñ•', '8': '8', '9': '6',
        '.': 'Àô', ',': "'", '?': '¬ø', '!': '¬°', '"': ',,', "'": ',', '(': ')', ')': '(', '[': ']', ']': '[',
        '{': '}', '}': '{', '<': '>', '>': '<', '&': '‚Öã', '_': '‚Äæ', ' ': ' '
    }
    return ''.join(upside_down_map.get(c, c) for c in text)[::-1]  # Reverse for proper effect

def to_elder_futhark(text: str) -> str:
    """Convert text to Elder Futhark runes"""
    if not text:
        return ""
    # Map for Elder Futhark runes
    rune_map = {
        'a': '·ö®', 'b': '·õí', 'c': '·õ≤', 'd': '·õû', 'e': '·õñ', 'f': '·ö†', 'g': '·ö∑', 'h': '·ö∫', 'i': '·õÅ',
        'j': '·õÉ', 'k': '·õ≤', 'l': '·õö', 'm': '·õó', 'n': '·öæ', 'o': '·õü', 'p': '·õà', 'q': '·õ≤·õ©', 'r': '·ö±',
        's': '·õã', 't': '·õè', 'u': '·ö¢', 'v': '·õ©', 'w': '·õ©', 'x': '·õ≤·õã', 'y': '·õÅ', 'z': '·õâ',
        'A': '·ö®', 'B': '·õí', 'C': '·õ≤', 'D': '·õû', 'E': '·õñ', 'F': '·ö†', 'G': '·ö∑', 'H': '·ö∫', 'I': '·õÅ',
        'J': '·õÉ', 'K': '·õ≤', 'L': '·õö', 'M': '·õó', 'N': '·öæ', 'O': '·õü', 'P': '·õà', 'Q': '·õ≤·õ©', 'R': '·ö±',
        'S': '·õã', 'T': '·õè', 'U': '·ö¢', 'V': '·õ©', 'W': '·õ©', 'X': '·õ≤·õã', 'Y': '·õÅ', 'Z': '·õâ',
        ' ': ' '
    }
    return ''.join(rune_map.get(c, c) for c in text)

def to_vaporwave(text: str) -> str:
    """Convert text to vaporwave aesthetic (wide spaced)"""
    if not text:
        return ""
    return ' '.join(c for c in text)

import random

def to_zalgo(text: str) -> str:
    """Convert text to zalgo (glitchy) text"""
    if not text:
        return ""
    # Zalgo diacritical marks
    zalgo_marks = [
        '\u0300', '\u0301', '\u0302', '\u0303', '\u0304', '\u0305', '\u0306', '\u0307', '\u0308',
        '\u0309', '\u030A', '\u030B', '\u030C', '\u030D', '\u030E', '\u030F', '\u0310', '\u0311',
        '\u0312', '\u0313', '\u0314', '\u0315', '\u031A', '\u031B', '\u033D', '\u033E', '\u033F',
        '\u0340', '\u0341', '\u0342', '\u0343', '\u0344', '\u0345', '\u0346', '\u0347', '\u0348',
        '\u0349', '\u034A', '\u034B', '\u034C', '\u034D', '\u034E', '\u034F'
    ]
    
    result = ''
    for c in text:
        result += c
        # Add 1-3 random zalgo marks to each character
        for _ in range(random.randint(1, 3)):
            result += random.choice(zalgo_marks)
    return result

def to_unicode_circled(text: str) -> str:
    """Convert text to unicode circled characters"""
    if not text:
        return ""
    # Map for circled text
    circled_map = {
        'a': 'üÖê', 'b': 'üÖë', 'c': 'üÖí', 'd': 'üÖì', 'e': 'üÖî', 'f': 'üÖï', 'g': 'üÖñ', 'h': 'üÖó', 'i': 'üÖò',
        'j': 'üÖô', 'k': 'üÖö', 'l': 'üÖõ', 'm': 'üÖú', 'n': 'üÖù', 'o': 'üÖû', 'p': 'üÖü', 'q': 'üÖ†', 'r': 'üÖ°',
        's': 'üÖ¢', 't': 'üÖ£', 'u': 'üÖ§', 'v': 'üÖ•', 'w': 'üÖ¶', 'x': 'üÖß', 'y': 'üÖ®', 'z': 'üÖ©',
        'A': 'üÖê', 'B': 'üÖë', 'C': 'üÖí', 'D': 'üÖì', 'E': 'üÖî', 'F': 'üÖï', 'G': 'üÖñ', 'H': 'üÖó', 'I': 'üÖò',
        'J': 'üÖô', 'K': 'üÖö', 'L': 'üÖõ', 'M': 'üÖú', 'N': 'üÖù', 'O': 'üÖû', 'P': 'üÖü', 'Q': 'üÖ†', 'R': 'üÖ°',
        'S': 'üÖ¢', 'T': 'üÖ£', 'U': 'üÖ§', 'V': 'üÖ•', 'W': 'üÖ¶', 'X': 'üÖß', 'Y': 'üÖ®', 'Z': 'üÖ©',
        '0': '‚ì™', '1': '‚ë†', '2': '‚ë°', '3': '‚ë¢', '4': '‚ë£', '5': '‚ë§', '6': '‚ë•', '7': '‚ë¶', '8': '‚ëß', '9': '‚ë®',
        ' ': ' '
    }
    return ''.join(circled_map.get(c, c) for c in text)

def to_small_caps(text: str) -> str:
    """Convert text to small caps"""
    if not text:
        return ""
    # Map for small caps
    small_caps_map = {
        'a': '·¥Ä', 'b': ' ô', 'c': '·¥Ñ', 'd': '·¥Ö', 'e': '·¥á', 'f': 'Íú∞', 'g': '…¢', 'h': ' ú', 'i': '…™',
        'j': '·¥ä', 'k': '·¥ã', 'l': ' ü', 'm': '·¥ç', 'n': '…¥', 'o': '·¥è', 'p': '·¥ò', 'q': '«´', 'r': ' Ä',
        's': 's', 't': '·¥õ', 'u': '·¥ú', 'v': '·¥†', 'w': '·¥°', 'x': 'x', 'y': ' è', 'z': '·¥¢',
        'A': 'A', 'B': 'B', 'C': 'C', 'D': 'D', 'E': 'E', 'F': 'F', 'G': 'G', 'H': 'H', 'I': 'I',
        'J': 'J', 'K': 'K', 'L': 'L', 'M': 'M', 'N': 'N', 'O': 'O', 'P': 'P', 'Q': 'Q', 'R': 'R',
        'S': 'S', 'T': 'T', 'U': 'U', 'V': 'V', 'W': 'W', 'X': 'X', 'Y': 'Y', 'Z': 'Z',
        ' ': ' '
    }
    return ''.join(small_caps_map.get(c, c) for c in text)

def to_braille(text: str) -> str:
    """Convert text to braille"""
    if not text:
        return ""
    # Map for braille
    braille_map = {
        'a': '‚†Å', 'b': '‚†É', 'c': '‚†â', 'd': '‚†ô', 'e': '‚†ë', 'f': '‚†ã', 'g': '‚†õ', 'h': '‚†ì', 'i': '‚†ä',
        'j': '‚†ö', 'k': '‚†Ö', 'l': '‚†á', 'm': '‚†ç', 'n': '‚†ù', 'o': '‚†ï', 'p': '‚†è', 'q': '‚†ü', 'r': '‚†ó',
        's': '‚†é', 't': '‚†û', 'u': '‚†•', 'v': '‚†ß', 'w': '‚†∫', 'x': '‚†≠', 'y': '‚†Ω', 'z': '‚†µ',
        'A': '‚††‚†Å', 'B': '‚††‚†É', 'C': '‚††‚†â', 'D': '‚††‚†ô', 'E': '‚††‚†ë', 'F': '‚††‚†ã', 'G': '‚††‚†õ', 'H': '‚††‚†ì', 'I': '‚††‚†ä',
        'J': '‚††‚†ö', 'K': '‚††‚†Ö', 'L': '‚††‚†á', 'M': '‚††‚†ç', 'N': '‚††‚†ù', 'O': '‚††‚†ï', 'P': '‚††‚†è', 'Q': '‚††‚†ü', 'R': '‚††‚†ó',
        'S': '‚††‚†é', 'T': '‚††‚†û', 'U': '‚††‚†•', 'V': '‚††‚†ß', 'W': '‚††‚†∫', 'X': '‚††‚†≠', 'Y': '‚††‚†Ω', 'Z': '‚††‚†µ',
        '0': '‚†º‚†ö', '1': '‚†º‚†Å', '2': '‚†º‚†É', '3': '‚†º‚†â', '4': '‚†º‚†ô', '5': '‚†º‚†ë', '6': '‚†º‚†ã', '7': '‚†º‚†õ', '8': '‚†º‚†ì', '9': '‚†º‚†ä',
        ' ': ' '
    }
    return ''.join(braille_map.get(c, c) for c in text)

def to_bubble(text: str) -> str:
    """Convert text to bubble letters"""
    if not text:
        return ""
    bubble_map = {
        'a': '‚ìê', 'b': '‚ìë', 'c': '‚ìí', 'd': '‚ìì', 'e': '‚ìî', 'f': '‚ìï', 'g': '‚ìñ', 'h': '‚ìó', 'i': '‚ìò',
        'j': '‚ìô', 'k': '‚ìö', 'l': '‚ìõ', 'm': '‚ìú', 'n': '‚ìù', 'o': '‚ìû', 'p': '‚ìü', 'q': '‚ì†', 'r': '‚ì°',
        's': '‚ì¢', 't': '‚ì£', 'u': '‚ì§', 'v': '‚ì•', 'w': '‚ì¶', 'x': '‚ìß', 'y': '‚ì®', 'z': '‚ì©',
        'A': '‚í∂', 'B': '‚í∑', 'C': '‚í∏', 'D': '‚íπ', 'E': '‚í∫', 'F': '‚íª', 'G': '‚íº', 'H': '‚íΩ', 'I': '‚íæ',
        'J': '‚íø', 'K': '‚ìÄ', 'L': '‚ìÅ', 'M': '‚ìÇ', 'N': '‚ìÉ', 'O': '‚ìÑ', 'P': '‚ìÖ', 'Q': '‚ìÜ', 'R': '‚ìá',
        'S': '‚ìà', 'T': '‚ìâ', 'U': '‚ìä', 'V': '‚ìã', 'W': '‚ìå', 'X': '‚ìç', 'Y': '‚ìé', 'Z': '‚ìè',
        ' ': ' '
    }
    return ''.join(bubble_map.get(c, c) for c in text)

def to_medieval(text: str) -> str:
    """Convert text to medieval-style characters"""
    if not text:
        return ""
    medieval_map = {
        'a': 'ùîû', 'b': 'ùîü', 'c': 'ùî†', 'd': 'ùî°', 'e': 'ùî¢', 'f': 'ùî£', 'g': 'ùî§', 'h': 'ùî•', 'i': 'ùî¶',
        'j': 'ùîß', 'k': 'ùî®', 'l': 'ùî©', 'm': 'ùî™', 'n': 'ùî´', 'o': 'ùî¨', 'p': 'ùî≠', 'q': 'ùîÆ', 'r': 'ùîØ',
        's': 'ùî∞', 't': 'ùî±', 'u': 'ùî≤', 'v': 'ùî≥', 'w': 'ùî¥', 'x': 'ùîµ', 'y': 'ùî∂', 'z': 'ùî∑',
        'A': 'ùîÑ', 'B': 'ùîÖ', 'C': '‚Ñ≠', 'D': 'ùîá', 'E': 'ùîà', 'F': 'ùîâ', 'G': 'ùîä', 'H': '‚Ñå', 'I': '‚Ñë',
        'J': 'ùîç', 'K': 'ùîé', 'L': 'ùîè', 'M': 'ùîê', 'N': 'ùîë', 'O': 'ùîí', 'P': 'ùîì', 'Q': 'ùîî', 'R': '‚Ñú',
        'S': 'ùîñ', 'T': 'ùîó', 'U': 'ùîò', 'V': 'ùîô', 'W': 'ùîö', 'X': 'ùîõ', 'Y': 'ùîú', 'Z': '‚Ñ®',
        ' ': ' '
    }
    return ''.join(medieval_map.get(c, c) for c in text)

def to_morse(text: str) -> str:
    """Convert text to Morse code"""
    if not text:
        return ""
    morse_map = {
        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',
        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',
        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',
        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',
        'y': '-.--', 'z': '--..', '0': '-----', '1': '.----', '2': '..---',
        '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...',
        '8': '---..', '9': '----.', ' ': ' '
    }
    return ' '.join(morse_map.get(c.lower(), c) for c in text)

def to_binary(text: str) -> str:
    """Convert text to binary"""
    if not text:
        return ""
    return ' '.join(format(ord(c), '08b') for c in text)

def to_strikethrough(text: str) -> str:
    """Convert text to strikethrough"""
    if not text:
        return ""
    return ''.join(c + 'Ã∂' for c in text)

def to_fullwidth(text: str) -> str:
    """Convert text to fullwidth characters"""
    if not text:
        return ""
    # Convert to fullwidth (shift ASCII range)
    return ''.join(chr(ord(c) + 0xFEE0) if 0x21 <= ord(c) <= 0x7E else c for c in text)

def to_mirror(text: str) -> str:
    """Convert text to mirrored characters"""
    if not text:
        return ""
    mirror_map = {
        'a': '…í', 'b': 'd', 'c': '…î', 'd': 'b', 'e': '…ò', 'f': '·é∏', 'g': '«´', 'h': ' ú',
        'i': 'i', 'j': 'ƒØ', 'k': ' û', 'l': '|', 'm': 'm', 'n': '·¥é', 'o': 'o', 'p': 'q',
        'q': 'p', 'r': '…ø', 's': '∆®', 't': '∆ö', 'u': 'u', 'v': 'v', 'w': 'w', 'x': 'x',
        'y': 'y', 'z': 'z', ' ': ' '
    }
    return ''.join(mirror_map.get(c.lower(), c) for c in text)[::-1]

def to_wavey(text: str) -> str:
    """Convert text to wavey style using combining characters"""
    if not text:
        return ""
    wave_marks = ['Ãæ', 'ÕÇ', 'ÃΩ', 'Õå']
    return ''.join(c + random.choice(wave_marks) for c in text)
